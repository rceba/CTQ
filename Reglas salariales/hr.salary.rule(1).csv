"id","category_id/id","category_code","condition_select","condition_python","cuenta_especie/id","code","amount_python_compute","note","fondo_ahorro_aux","forma_pago","amount_fix","account_tax_id/id","integrar_al_ingreso","integrar_ptu","integrar_estatal","condition_range","variable_imss_monto","name","tipo_cotro_pago/id","parte_exenta/id","parte_gravada/id","exencion","variable_imss","amount_percentage","amount_percentage_base","sequence","variable_imss_tipo","tipo_cdeduccion/id","amount_select","tipo_cpercepcion/id"
"payroll_itadmin_rule.hr_rule_basic","payroll_itadmin_category.BASIC","BASIC","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"BASIC","result = contract.wage",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Basic Salary",,,,"False","False","0.0",,"1","Todo el monto",,"Python Code",
"payroll_itadmin_rule.hr_rule_taxable","payroll_itadmin_category.GROSS","GROSS","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"GROSS","result = categories.BASIC + categories.ALW",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Gross",,,,"False","False","0.0",,"100","Todo el monto",,"Python Code",
"payroll_itadmin_rule.hr_rule_net","payroll_itadmin_category.NET","NET","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"NET","result = categories.BASIC + categories.ALW + categories.DED",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Net Salary",,,,"False","False","0.0",,"200","Todo el monto",,"Python Code",
"payroll_itadmin_rule.devolucion_isr","payroll_itadmin_category.ALW3","ALW3","Python Expression","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      else:
         result = 0
   else:
      if subsidio_empleo - isr_tarifa_113  < payslip.acum_isr:
          subem_entregar = payslip.acum_isr

   if isr_retener - op_isr_ajuste < 0 or subem_entregar > 0 or (subsidio_empleo > isr_tarifa_113 and payslip.acum_isr > 0):
     result = 1
   else:
     result = 0
else:
   result = 0",,"O007","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   else:
      result = 0
else:
      if subsidio_empleo - isr_tarifa_113  < payslip.acum_isr:
          subem_entregar = payslip.acum_isr
      elif  subsidio_empleo > isr_tarifa_113 and payslip.acum_isr > 0:
          subem_entregar = payslip.acum_isr

if isr_retener - op_isr_ajuste < 0:
   result = round(abs(isr_retener - op_isr_ajuste),2)
else:
   result = round(abs(subem_entregar),2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DevoluciÃ³n ISR","catalogo.otropago01",,,"False","False","0.0",,"425","Todo el monto",,"Python Code",
"payroll_itadmin_rule.reintegro_isr","payroll_itadmin_category.ALW3","ALW3","Python Expression","if inputs.O004:
   result = inputs.O004.amount
else:
   result =0",,"O004","if inputs.O004:
   result = inputs.O004.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Reintegro de ISR retenido en exceso de ejercicio anterior","catalogo.otropago05",,,"False","False","0.0",,"410","Todo el monto",,"Python Code",
"payroll_itadmin_rule.isr_ajuste_anual","payroll_itadmin_category.DED","DED","Python Expression","if payslip.isr_anual and payslip.isr_ajustar:
   result = 1
else:
   result = 0",,"D020","
#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
limite_inferior2 = 0
cuota_fija2 = 0
porcentaje_sobre_excedente2 = 0
grabado_anual = 0
grabado_mensual = 0

isr_anual = 0
isr_acum_anual = 0
##################subsidio mensual##############################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
isr_retener = 0

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          isr_retener = isr_retener - op_isr_ajuste
       else:
          isr_retener = isr_retener - payslip.acum_isr_antes_subem + payslip.acum_subsidio_aplicado
   else:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             isr_retener = isr_retener - (payslip.acum_subsidio_aplicado - subsidio_empleo)
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if inputs.ISR2:
   isr_mensual =  inputs.ISR2.amount
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
        if isr_retener < 0:
            isr_mensual =  0
        else:
            isr_mensual = round(isr_retener,2)
   else:
        if subsidio_pagado < 0:
            isr_mensual =  0
        else:
            if total2 < 0:
               isr_mensual = abs(round(total,2))
            else:
               isr_mensual = abs(round(total2,2))

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > 0:
      total = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      total = isr_tarifa_113 - abs(payslip.acum_isr)
else:
   total = isr_tarifa_113 

if total > isr_mensual:
   isr_mensual = total

######################### Calculo ISR anual #############################
grabado_anual = TPERG + payslip.acum_per_grav_anual

if contract.tablas_cfdi_id:
    line = contract.env['tablas.isr.anual'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_anual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = grabado_anual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

sub_apl_anual = payslip.acum_subsidio_aplicado_anual -  payslip.acum_dev_subem - payslip.acum_dev_subem_entregado
  
isr_ret_anual =  payslip.acum_isr_anual + payslip.acum_isr_ajuste - payslip.acum_dev_isr

isr_anual = isr_tarifa_113 - isr_ret_anual - isr_mensual

if isr_anual > 0:
   result =  abs(round(isr_anual, 2))
else:
   result =  0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR ajuste anual",,,,"False","False","0.0",,"620","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_quincenal_aguinaldo","payroll_itadmin_category.DED","DED","Python Expression","if payslip.isr_anual and payslip.isr_ajustar:
   result = 1
else:
   result = 0",,"ISR2","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_anual = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days
if worked_days.SEPT:
   dias_laborados = dias_laborados + worked_days.SEPT.number_of_days

#grabado_anual
grabado_anual = TPERG + payslip.acum_per_grav_anual + payslip.percepcion_gravada_proyectado

if contract.tablas_cfdi_id:
    line = contract.env['tablas.isr.anual'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_anual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_anual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_anual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

isr_anual = 0
#subsidio mensual
#isr_anual = isr_tarifa_113 - payslip.acum_isr_anual - payslip.acum_subsidio_aplicado_anual - #payslip.isr_proyectado * 2

#if isr_anual > 0:
#   result = isr_anual
#else:
#   result = 0

#subsidio mensual
if subsidio_empleo > 0:
   subsidio_pagado = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem_anual)  - subsidio_empleo + abs(payslip.acum_subsidio_aplicado_anual)
else:
   subsidio_pagado = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem_anual)  - subsidio_empleo - abs(payslip.acum_isr_anual) - payslip.dev_acum_isr + payslip.acum_isr_ajuste
   total = isr_tarifa_113 - payslip.acum_isr_anual - payslip.isr_proyectado - payslip.dev_acum_isr + payslip.acum_isr_ajuste
   total2 =  subsidio_pagado

if subsidio_pagado < 0:
   result = 0
else:
   if total > 0:
      result = abs(round(total, 2))
   else:
      result = abs(round(total2, 2))",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR quincenal (sp) aguinaldo",,,,"False","False","0.0",,"5","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.sueldo_base","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.WORK100:
   result = 1>0
else:
   result = 0>1",,"P001","dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days

result = round(contract.sueldo_diario*dias_laborados, 2)

if inputs.P001:
   result = inputs.P001.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Sueldo base",,,,"False","False","0.0",,"100",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.septimo_dia","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.SEPT:
   result = 1
else:
   result = 0",,"P005","dias_laborados = 0

if worked_days.SEPT:
   result = round(worked_days.SEPT.number_of_days * contract.sueldo_diario, 2)
else:
  result = 0",,"False","Efectivo","10.0",,,"False","False","contract.wage","0.0","Septimo dia",,,,"False","False","0.0",,"102","Todo el monto",,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.septimo_dia_liq","payroll_itadmin_category.ALW","ALW","Python Expression","if contract.periodicidad_pago ==""02"":
   result = 1> 0
else:
   result = 0> 1",,"P003","dias_laborados = 0

if contract.dias_pendientes_pagar > 0 :
  dias_laborados = contract.dias_pendientes_pagar
  result = round(1/6 *contract.sueldo_diario*dias_laborados, 2)
else:
  result = 0",,"False","Efectivo","10.0",,,"False","False","contract.wage","0.0","Septimo dia liquidaciÃ³n",,,,"False","False","0.0",,"103","Todo el monto",,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.dias_adicionales","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P002:
   result = 1
else:
   result = 0",,"P002","result = inputs.P002.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DÃ­as adicionales",,,,"False","False","0.0",,"105",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.horas_extras_dobles","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.HEX2:
   result = 1>0
else:
   result = 0>1",,"HEX2","result =  PE003 + PG003",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Horas extras dobles",,"payroll_itadmin_rule.hora_extra_dob_ex","payroll_itadmin_rule.hora_extra_dob_gr","True","False","0.0",,"112","Todo el monto",,"Python Code","catalogo.percepciones14"
"payroll_itadmin_rule.aguinaldo","payroll_itadmin_category.ALW","ALW","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"P004","result =  PE004 + PG004",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Aguinaldo",,"payroll_itadmin_rule.aguinaldo_ex","payroll_itadmin_rule.aguinaldo_gr","True","False","0.0",,"117","Todo el monto",,"Python Code","catalogo.percepciones02"
"payroll_itadmin_rule.aguinaldo_liq","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.AGUI:
   result = 1
else:
   result = 0",,"P004","result =  PE004 + PG004",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Aguinaldo liquidacion",,"payroll_itadmin_rule.aguinaldo_ex","payroll_itadmin_rule.aguinaldo_liq_gr","True","False","0.0",,"117","Todo el monto",,"Python Code","catalogo.percepciones02"
"payroll_itadmin_rule.devolucion_descuento","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P008:
   result = 1
else:
   result = 0",,"P008","result = inputs.P008.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DevoluciÃ³n descuento",,,,"False","False","0.0",,"125",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.vacaciones","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.VAC:
   result = 1 > 0
else:
   result = 0 > 1",,"P009","total = 0
dias_vacaciones = 0

if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)

if line:
   result = round(worked_days.VAC.number_of_days * contract.sueldo_diario,2)
else:
   result = 0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Vacaciones",,,,"False","False","0.0",,"130","Todo el monto",,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.vacaciones_liq","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.VAC:
   result = 1
else:
   result = 0",,"P009","dias_laborados = 0

if worked_days.VAC:
   dias_laborados = worked_days.VAC.number_of_days

result = round(contract.sueldo_diario*dias_laborados, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Vacaciones liquidaciÃ³n",,,,"False","False","0.0",,"131","Todo el monto",,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.prima_vacacional","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.VAC  and contract.tipo_prima_vacacional == '02' and not payslip.nom_liquidacion:
   result = 1
else:
   result = 0",,"P010","result = PG010 + PE010",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prima vacacional",,"payroll_itadmin_rule.prima_vac_ex","payroll_itadmin_rule.prima_vac_gr","True","False","25.0","103","137","Todo el monto",,"Python Code","catalogo.percepciones16"
"payroll_itadmin_rule.prima_vacacional_liq","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.PVC:
   result = 1
else:
   result = 0",,"P010","result = PG010 + PE010",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prima vacacional liquidaciÃ³n",,"payroll_itadmin_rule.prima_vac_liq_ex","payroll_itadmin_rule.prima_vac_liq_gr","True","False","25.0","103","137","Todo el monto",,"Python Code","catalogo.percepciones16"
"payroll_itadmin_rule.prima_vacacional_com","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.PVC:
   result = 1
else:
   result = 0",,"P010","result = PG010 + PE010",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prima vacacional completo",,"payroll_itadmin_rule.prima_vac_com_ex","payroll_itadmin_rule.prima_vac_com_gr","True","False","25.0","103","137","Todo el monto",,"Python Code","catalogo.percepciones16"
"payroll_itadmin_rule.reparto_utilidades","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.PTU:
   result = 1
else:
   result = 0",,"P011","result = PG011 + PE011",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Reparto de utilidades",,"payroll_itadmin_rule.reparto_utilidad_ex","payroll_itadmin_rule.reparto_utilidad_gr","True","False","0.0",,"142","Todo el monto",,"Python Code","catalogo.percepciones03"
"payroll_itadmin_rule.gratificacion","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P013:
   result = 1
else:
   result = 0",,"P013","result = inputs.P013.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","GratificaciÃ³n",,,,"False","False","0.0",,"145","Todo el monto",,"Python Code",
"payroll_itadmin_rule.premio_asistencia","payroll_itadmin_category.ALW","ALW","Python Expression","if contract.bono_asistencia:
   result = 1
else:
   result =  0",,"P015","result = round(P001 * contract.bono_asistencia_amount/100, 2)",,"False","Efectivo","60.0",,,"False","False","contract.wage","0.0","Premio por asistencia",,,,"False","False","0.0",,"150","Todo el monto",,"Python Code","catalogo.percepciones40"
"payroll_itadmin_rule.premio_puntualidad","payroll_itadmin_category.ALW","ALW","Python Expression","if contract.bono_puntualidad:
   result = 1
else:
   result =  0",,"P016","result = round(P001 * 0.10, 2)",,"False","Efectivo","140.0",,,"False","False","contract.wage","0.0","Premio de puntualidad",,,,"False","False","0.0",,"155","Todo el monto",,"Python Code","catalogo.percepciones08"
"payroll_itadmin_rule.diferencia_sueldo","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P017:
   result = 1
else:
   result = 0",,"P017","result = inputs.P017.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Diferencia de sueldo",,,,"False","False","0.0",,"160",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.prima_dominical","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.PDM or worked_days.P019:
   result = 1
else:
   result = 0",,"P019","result = PE019 + PG019",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prima dominical",,"payroll_itadmin_rule.prima_dominical_ex","payroll_itadmin_rule.prima_dominical_gr","True","False","0.0",,"167","Todo el monto",,"Python Code","catalogo.percepciones15"
"payroll_itadmin_rule.dev_incentivo","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P020:
   result = 1
else:
   result = 0",,"P020","result = inputs.P020.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Dev. incentivo punt. o asist.",,,,"False","False","0.0",,"170",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.descanso_laborado","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.DFES or worked_days.DFES_3:
   result = 1
else:
   result = 0",,"P022","result =  P022E + P022G",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descanso-Festivo laborado",,"payroll_itadmin_rule.descanso_ex","payroll_itadmin_rule.descanso_gr","True","False","0.0",,"177","Todo el monto",,"Python Code","catalogo.percepciones33"
"payroll_itadmin_rule.dev_infonavit","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P023:
   result = 1
else:
   result = 0",,"P023","result = inputs.P023.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Dev. Infonavit",,,,"False","False","0.0",,"180",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.dev_falta","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P025:
   result = 1
else:
   result = 0",,"P025","result = inputs.P025.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DevoluciÃ³n x desc. falta",,,,"False","False","0.0",,"185",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.vacaciones_econ","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P028:
   result = 1
else:
   result = 0",,"P028","result = inputs.P028.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Vacaciones econÃ³micas",,,,"False","False","0.0",,"190",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.diferencia_sueldo_anterior","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P030:
   result = 1
else:
   result = 0",,"P030","result = inputs.P030.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Diferencia sueldo qna. anterior",,,,"False","False","0.0",,"195",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.dev_caja_ahorro","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P033:
   result = 1
else:
   result = 0",,"P033","result = inputs.P033.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Dev. caja de ahorro",,,,"False","False","0.0",,"200",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.prestamo_caja_ahorro","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P034:
   result = 1
else:
   result = 0",,"P034","result = inputs.P034.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","PrÃ©stamo caja de ahorro",,,,"False","False","0.0",,"205",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.vale_despensa","payroll_itadmin_category.ALW","ALW","Python Expression","work = 0

if contract.vale_despensa:
   if inputs.DESP:
      if inputs.DESP.amount > 0:
         result = 1

   if worked_days.VAC:
      if worked_days.VAC.number_of_days > 0:
         work = 1

   if worked_days.WORK100:
      if worked_days.WORK100.number_of_days > 0:
         work = 1

   if payslip.nom_liquidacion:
        work = 0

result = work",,"P036","result = PE036 + PG036

# Tope exento ISR 1 uma por dia
# tope exento IMSS .4 uma por dia",,"False","Especie","211.37",,,"False","False","contract.wage","0.0","Vale de despensa",,"payroll_itadmin_rule.vale_despensa_ex","payroll_itadmin_rule.vale_despensa_gr","True","False","0.0",,"212","Todo el monto",,"Python Code","catalogo.percepciones24"
"payroll_itadmin_rule.bono_desempeno","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P037:
   if inputs.P037.amount > 0:
      result = 1
   else:
      result = 0",,"P037","if inputs.P037:
   if payslip.retardo:
      result = 0
   else:
      result = inputs.P037.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Bono por desempeÃ±o",,,,"False","False","0.0",,"215","Todo el monto",,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.viaticos","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.PVIAT:
   if inputs.PVIAT.amount > 0:
      result = 1
   else:
      result = 0",,"P040","result = PE040",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Viaticos",,,,"False","False","0.0",,"222","Todo el monto",,"Python Code","catalogo.percepciones41"
"payroll_itadmin_rule.indemnizacion","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.IND:
   result =  1
else:
   result = 0",,"P103","result = PE103 + PG103
",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","IndemnizaciÃ³n",,"payroll_itadmin_rule.indemnizacion_ex","payroll_itadmin_rule.indemnizacion_gr","True","False","0.0",,"232","Todo el monto",,"Python Code","catalogo.percepciones20"
"payroll_itadmin_rule.prima_antiguedad","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.PDA:
   result =  1
else:
   result = 0",,"P104","result = PE104 + PG104",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prima de antiguedad",,"payroll_itadmin_rule.prima_antiguedad_ex","payroll_itadmin_rule.prima_antiguedad_gr","True","False","0.0",,"237","Todo el monto",,"Python Code","catalogo.percepciones17"
"payroll_itadmin_rule.pago_separacion","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.PPS:
   result =  1
else:
   result = 0",,"P105","result = PE105 + PG105",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Pagos por separaciÃ³n",,"payroll_itadmin_rule.pagos_separacion_ex","payroll_itadmin_rule.pagos_separacion_gr","True","False","0.0",,"242","Todo el monto",,"Python Code","catalogo.percepciones18"
"payroll_itadmin_rule.prestamo_personal","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P200:
   result = 1
else:
   result = 0",,"P200","result = inputs.P200.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","PrÃ©stamo personal",,,,"False","False","0.0",,"245",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.permiso_alumbramiento","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P201:
   result = 1
else:
   result = 0",,"P201","result = inputs.P201.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Permiso por alumbramiento",,,,"False","False","0.0",,"250",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.permiso_defuncion","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P202:
   result = 1
else:
   result = 0",,"P202","result = inputs.P202.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Permiso por defunciÃ³n",,,,"False","False","0.0",,"255",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.permiso_matrimonio","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P203:
   result = 1
else:
   result = 0",,"P203","result = inputs.P203.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Permiso por matrimonio",,,,"False","False","0.0",,"260",,,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.cominsiones","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P204:
   if inputs.P204.amount > 0:
      result = 1
   else:
      result = 0",,"P204","if inputs.P204:
   result = inputs.P204.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Comisiones",,,,"False","False","0.0",,"265","Todo el monto",,"Python Code","catalogo.percepciones23"
"payroll_itadmin_rule.compensaciones","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P205:
   if inputs.P205.amount > 0:
      result = 1
   else:
      result = 0",,"P205","if inputs.P205:
   result = inputs.P205.amount
else:
   result = 0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Compensaciones",,,,"False","False","0.0",,"270","Todo el monto",,"Python Code","catalogo.percepciones33"
"payroll_itadmin_rule.incentivo_productividad","payroll_itadmin_category.ALW","ALW","Python Expression","if contract.bono_puntualidad:
   result = 1
else:
   result =  0",,"P206","result = round(P001 * contract.bono_puntualidad_amount / 100, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Incentivo de productividad",,,,"False","False","0.0",,"275","Todo el monto",,"Python Code","catalogo.percepciones33"
"payroll_itadmin_rule.percepcion_adicional","payroll_itadmin_category.ALW","ALW","Python Expression","if contract.percepcion_adicional and payslip.no_nomina == '2':
   result = 1
else:
   result = 0",,"P208","result =  round(contract.percepcion_adicional.amount, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Percepcion adicional",,,,"True","False","0.0",,"285","Todo el monto",,"Python Code","catalogo.percepciones35"
"payroll_itadmin_rule.alimentacion","payroll_itadmin_category.ALW","ALW","Python Expression","if contract.alimentacion:
   result = 1
else:
   result = 0",,"P209","result = round(P001 * contract.alimentacion_amount / 100, 2)",,"False","Especie","0.0",,,"False","False","contract.wage","0.0","AlimentaciÃ³n",,,,"False","False","0.0",,"290","Todo el monto",,"Python Code","catalogo.percepciones24"
"payroll_itadmin_rule.fondo_ahorro_empresa","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0",,"P041","result = PE041 + PG041",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Fondo ahorro empresa",,"payroll_itadmin_rule.fondo_ahorra_emp_ex","payroll_itadmin_rule.fondo_ahorra_emp_gr","True","False","0.0",,"288","Todo el monto",,"Python Code","catalogo.percepciones05"
"payroll_itadmin_rule.horas_extras_simples","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.HEX1:
   result = 1
else:
   result = 0",,"HEX1","result = PE006 + PG006
",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Horas extras simples",,"payroll_itadmin_rule.horas_extra_sim_ex","payroll_itadmin_rule.horas_extra_sim_gr","True","False","0.0",,"297","Todo el monto",,"Python Code","catalogo.percepciones14"
"payroll_itadmin_rule.pago_fondo_ahorro","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.PFA:
   if inputs.PFA.amount > 0:
       result = 1
   else:
       result = 0
else:
   result = 0",,"P042","result = PG042 + PE042",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Pago fondo ahorro",,"payroll_itadmin_rule.pago_fondo_ex","payroll_itadmin_rule.pago_fondo_gr","True","False","0.0",,"302","Todo el monto",,"Python Code","catalogo.percepciones05"
"payroll_itadmin_rule.horas_extras_triples","payroll_itadmin_category.ALW","ALW","Python Expression","if worked_days.HEX3:
   result = 1
else:
   result = 0",,"HEX3","result =  PG007",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Horas extras triples",,,"payroll_itadmin_rule.horas_extra_tri_gr","True","False","0.0",,"302","Todo el monto",,"Python Code","catalogo.percepciones14"
"payroll_itadmin_rule.tiempo_extra","payroll_itadmin_category.ALW","ALW","Python Expression","if inputs.P043:
   result = 1
else:
   result = 0",,"P043","result = PE043 + PG043",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Tiempo extra",,"payroll_itadmin_rule.tiempo_extra_ex","payroll_itadmin_rule.tiempo_extra_gr","True","False","0.0",,"307","Todo el monto",,"Python Code","catalogo.percepciones01"
"payroll_itadmin_rule.ret_inv_vida","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"DA01","dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if contract.periodicidad_pago == '02':
   dias_laborados = dias_laborados + dias_laborados*1/6

#cuota del IMSS parte del Empleado
salario_cotizado = contract.sueldo_base_cotizacion * dias_laborados
uma3 =  contract.tablas_cfdi_id.uma * 3
# falta especie excedente

prestaciones = salario_cotizado * contract.tablas_cfdi_id.enf_mat_prestaciones_e/100
invalli_y_vida = salario_cotizado * contract.tablas_cfdi_id.inv_vida_e/100
cesantia_y_vejez = salario_cotizado * contract.tablas_cfdi_id.cesantia_vejez_e/100
pensio_y_benefi = salario_cotizado * contract.tablas_cfdi_id.enf_mat_gastos_med_e/100

#seguro_enfermedad_maternidad
excedente = contract.sueldo_base_cotizacion - uma3
base_cotizacion = excedente * contract.tablas_cfdi_id.enf_mat_excedente_e/100
seg_enf_mat = base_cotizacion * dias_laborados

mens = prestaciones + pensio_y_benefi + invalli_y_vida + cesantia_y_vejez + seg_enf_mat
result = invalli_y_vida",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ret. Inv. y vida",,,,"False","False","0.0",,"310","Todo el monto",,"Python Code",
"payroll_itadmin_rule.ret_cesantia","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"DA02","dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if contract.periodicidad_pago == '02':
   dias_laborados = dias_laborados + dias_laborados*1/6

#cuota del IMSS parte del Empleado
salario_cotizado = contract.sueldo_base_cotizacion * dias_laborados
uma3 =  contract.tablas_cfdi_id.uma * 3
# falta especie excedente

prestaciones = salario_cotizado * contract.tablas_cfdi_id.enf_mat_prestaciones_e/100
invalli_y_vida = salario_cotizado * contract.tablas_cfdi_id.inv_vida_e/100
cesantia_y_vejez = salario_cotizado * contract.tablas_cfdi_id.cesantia_vejez_e/100
pensio_y_benefi = salario_cotizado * contract.tablas_cfdi_id.enf_mat_gastos_med_e/100

#seguro_enfermedad_maternidad
excedente = contract.sueldo_base_cotizacion - uma3
base_cotizacion = excedente * payslip.imss_mes
seg_enf_mat = base_cotizacion * contract.tablas_cfdi_id.enf_mat_excedente_e/100

mens = prestaciones + pensio_y_benefi + invalli_y_vida + cesantia_y_vejez + seg_enf_mat
result = cesantia_y_vejez",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ret. Cesantia",,,,"False","False","0.0",,"311","Todo el monto",,"Python Code",
"payroll_itadmin_rule.re_enf_mat","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"DA03","dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if contract.periodicidad_pago == '02':
   dias_laborados = dias_laborados + dias_laborados*1/6

#cuota del IMSS parte del Empleado
salario_cotizado = contract.sueldo_base_cotizacion * dias_laborados
uma3 =  contract.tablas_cfdi_id.uma * 3
# falta especie excedente

prestaciones = salario_cotizado * contract.tablas_cfdi_id.enf_mat_prestaciones_e/100
invalli_y_vida = salario_cotizado * contract.tablas_cfdi_id.inv_vida_e/100
cesantia_y_vejez = salario_cotizado * contract.tablas_cfdi_id.cesantia_vejez_e/100
pensio_y_benefi = salario_cotizado * contract.tablas_cfdi_id.enf_mat_gastos_med_e/100

#seguro_enfermedad_maternidad
excedente = contract.sueldo_base_cotizacion - uma3
base_cotizacion = excedente * payslip.imss_mes
seg_enf_mat = base_cotizacion * contract.tablas_cfdi_id.enf_mat_excedente_e/100

if contract.sueldo_diario_integrado < uma3:
  result = prestaciones + pensio_y_benefi
else:
  result = prestaciones + pensio_y_benefi + abs(seg_enf_mat)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ret. Enf y Mat. obrero",,,,"False","False","0.0",,"312","Todo el monto",,"Python Code",
"payroll_itadmin_rule.ajuste_viaticos","payroll_itadmin_category.DED","DED","Python Expression","if inputs.DVIAT:
   if inputs.DVIAT.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"D003","if inputs.DVIAT:
   result = inputs.DVIAT.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste en viÃ¡ticos entregados al trabajador",,,,"False","False","0.0",,"640","Todo el monto","catalogos.deduccion81","Python Code",
"payroll_itadmin_rule.prestamo_empresa","payroll_itadmin_category.DED","DED","Python Expression","result = 0",,"D064","result =  contract.prest_financ",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prestamo empresa",,,,"False","False","0.0",,"364","Todo el monto","catalogos.deduccion12","Python Code",
"payroll_itadmin_rule.interes_prestamo_empresa","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D013:
   if inputs.D013.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"D065","result = inputs.D013.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","InterÃ©s prestamo empresa",,,,"False","False","0.0",,"365","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.anticipo_sueldo","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"D066","result = contract.anticipo_sueldo",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Anticipo sueldo",,,,"False","False","0.0",,"366","Todo el monto","catalogos.deduccion12","Python Code",
"payroll_itadmin_rule.fondo_ahorro","payroll_itadmin_category.DED","DED","Python Expression","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0",,"D067","result = round(P001 * .075, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Fondo de ahorro",,,,"False","False","0.0",,"367","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.fondo_de_ahorro_empresa","payroll_itadmin_category.DED","DED","Python Expression","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0",,"D068","result = round(P001 * .075, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Fondo de ahorro empresa",,,,"False","False","0.0",,"368","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.deduccion_general","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"D070","result = contract.deduc_gral",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DeducciÃ³n general",,,,"False","False","0.0",,"370","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.prestamo_fondo_ahorro","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D009:
   if inputs.D009.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"D072","result = inputs.D009.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Prestamo fondo de ahorro",,,,"False","False","0.0",,"372","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.interes_prestamo_fondo","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D009:
   if inputs.D009.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"D073","result = inputs.D009.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","InterÃ©s prestamo fondo de ahorro",,,,"False","False","0.0",,"373","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.devolucion_viaticos","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"D080","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DevoluciÃ³n de viÃ¡ticos",,,,"False","False","0.0",,"380","Todo el monto","catalogos.deduccion81","Fixed Amount",
"payroll_itadmin_rule.aportacion_sar","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"D088","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","AportaciÃ³n voluntaria SAR",,,,"False","False","0.0",,"388","Todo el monto","catalogos.deduccion23","Fixed Amount",
"payroll_itadmin_rule.anticipo_gastos","payroll_itadmin_category.DED","DED","Python Expression","if inputs.AGNC:
   result =  1>0
else:
   result = 0>1",,"D089","if inputs.AGNC:
   result = inputs.AGNC.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Anticipo de gastos no comprobados",,,,"False","False","0.0",,"389","Todo el monto",,"Python Code",
"payroll_itadmin_rule.prestamo","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"390","result = (payslip.installment_amount or 0)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","PrÃ©stamo",,,,"False","False","0.0",,"390","Todo el monto",,"Python Code",
"payroll_itadmin_rule.interes_prestamo","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"391","result = (payslip.installment_int or 0)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","InterÃ©s del prÃ©stamo",,,,"False","False","0.0",,"391","Todo el monto",,"Python Code",
"payroll_itadmin_rule.total_percepcion_ex","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"TPERE","result = categories.ALW2",,"False",,"0.0",,,"False","False","contract.wage","0.0","Total Percepcion exento",,,,"False","False","0.0",,"397",,,"Python Code",
"payroll_itadmin_rule.total_percepcion_gr","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"TPERG","result = categories.ALW - categories.ALW2",,"False",,"0.0",,,"False","False","contract.wage","0.0","Total Percepciones Gravadas",,,,"False","False","0.0",,"398","Todo el monto",,"Python Code",
"payroll_itadmin_rule.total_percepcion","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"TPER","result = TPERG + TPERE",,"False",,"0.0",,,"False","False","contract.wage","0.0","Total Percepciones",,,,"False","False","0.0",,"399","Todo el monto",,"Python Code",
"payroll_itadmin_rule.subsidio_empleo_01","payroll_itadmin_category.ALW3","ALW3","Python Expression","work = 0

if TPERG > 0:
   work = 1
if rules.O005:
   work = 0
if rules.O006:
   work = 0

result = work",,"O001","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

subem_entregar = 0
factor01 = 0
dev_isr = 0
#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > isr_tarifa_113:
      if subsidio_empleo - isr_tarifa_113  < payslip.acum_isr or (subsidio_empleo > isr_tarifa_113 and payslip.acum_isr > 0):
          dev_isr = payslip.acum_isr
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if not (payslip.acum_subsidio_aplicado <= 0 and subsidio_empleo > 0):
          factor01 = payslip.acum_isr_antes_subem + subem_entregar - payslip.acum_subsidio_aplicado - dev_isr
          if factor01 > 0:
              subem_entregar = factor01
          else:
               subem_entregar = 0            
else:
   subsidio_entregado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_entregado

smm = 0
if payslip.ultima_nomina and payslip.isr_ajustar:
   line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
   smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
else:
   smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

if round(grabado_mensual,2) <= round(smm,2):
   result = 0
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
      if subem_entregar > 0:
         result = round(subem_entregar,2)
      else:
         result = 0
   else:
      if subsidio_empleo > 0:
         if subsidio_entregado < 0:
            result = round(abs(total2),2)
         else:
            result = 0
      else:
         result = 0

if inputs.O001:
   result = inputs.O001.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Subsidio para el empleo (sp)","catalogo.otropago02",,,"False","False","0.0",,"435","Todo el monto",,"Python Code",
"payroll_itadmin_rule.subsidio_empleo_02","payroll_itadmin_category.ALW3","ALW3","Always True","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0   
grabado_mensual = 0

grabado_mensual = TPERG

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual

if subsidio_empleo <= 0:
    result = 0
else:
   result =  1",,"O001","result = 0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Subsidio para el empleo (sp) PTU",,,,"False","False","0.0",,"400","Todo el monto",,"Python Code",
"payroll_itadmin_rule.subsidio_empleo_03","payroll_itadmin_category.ALW3","ALW3","Always True","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
dias_periodo_mes = 0
dias_periodo = 0

if contract.periodicidad_pago == '02' and payslip.isr_ajustar:
   dias_periodo_mes = payslip.dias_periodo
   dias_periodo = 7 * float(payslip.no_nomina)
else:
   dias_periodo_mes = contract.tablas_cfdi_id.imss_mes
   dias_periodo = payslip.dias_pagar

#grabado_mensual
if float(payslip.no_nomina) > 1 and payslip.isr_ajustar:
        grabado_mensual = (TPERG + payslip.acum_per_grav) / dias_periodo * dias_periodo_mes
else:
        grabado_mensual = TPERG  / dias_periodo * dias_periodo_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
if subsidio_empleo <= 0:
    result = 0
else:
   result =  1",,"O001","result = 0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Subsidio para el empleo (sp)","catalogo.otropago02",,,"False","False","0.0",,"400","Todo el monto",,"Python Code",
"payroll_itadmin_rule.viaticos_01","payroll_itadmin_category.ALW3","ALW3","Python Expression","if inputs.VIAT:
   if inputs.VIAT.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"O003","if inputs.VIAT:
   result = inputs.VIAT.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Viaticos","catalogo.otropago03",,,"False","False","0.0",,"405","Todo el monto",,"Python Code",
"payroll_itadmin_rule.isr_compensacion_anual","payroll_itadmin_category.ALW3","ALW3","Python Expression","if payslip.isr_anual and payslip.isr_ajustar:
   result = 1
else:
   result = 0",,"O008","
#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
limite_inferior2 = 0
cuota_fija2 = 0
porcentaje_sobre_excedente2 = 0
grabado_anual = 0
grabado_mensual = 0

isr_anual = 0
isr_acum_anual = 0
subsidio_x_aplicar = 0
##################subsidio mensual##############################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

if payslip.ultima_nomina and payslip.isr_ajustar:
   subsidio_x_aplicar = subsidio_empleo - payslip.acum_subsidio_aplicado
else:
   subsidio_x_aplicar = (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar

op_isr_ajuste = 0
isr_retener = 0

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          isr_retener = isr_retener - op_isr_ajuste
       else:
          isr_retener = isr_retener - payslip.acum_isr_antes_subem + payslip.acum_subsidio_aplicado
   else:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             isr_retener = isr_retener - (payslip.acum_subsidio_aplicado - subsidio_empleo)
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if inputs.ISR2:
   isr_mensual =  inputs.ISR2.amount
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
        if isr_retener < 0:
            isr_mensual =  0
        else:
            isr_mensual = round(isr_retener,2)
   else:
        if subsidio_pagado < 0:
            isr_mensual =  0
        else:
            if total2 < 0:
               isr_mensual = abs(round(total,2))
            else:
               isr_mensual = abs(round(total2,2))

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > 0:
      total = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      total = isr_tarifa_113 - abs(payslip.acum_isr)
else:
   total = isr_tarifa_113 

if total > isr_mensual:
   isr_mensual = total

######################### Calculo ISR anual #############################
grabado_anual = TPERG + payslip.acum_per_grav_anual

if contract.tablas_cfdi_id:
    line = contract.env['tablas.isr.anual'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_anual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = grabado_anual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

sub_apl_anual = payslip.acum_subsidio_aplicado_anual -  payslip.acum_dev_subem - payslip.acum_dev_subem_entregado
  
isr_ret_anual =  payslip.acum_isr_anual + payslip.acum_isr_ajuste - payslip.acum_dev_isr

isr_anual = round(isr_tarifa_113 - isr_ret_anual  - isr_mensual, 2)

if isr_anual < 0:
   result =  abs(isr_anual)
else:
   result =  0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR por compensaciÃ³n anual","catalogo.otropago04",,,"False","False","0.0",,"430","Todo el monto",,"Python Code",
"payroll_itadmin_rule.isr_retener_subsidio","payroll_itadmin_category.ALW3","ALW3","Python Expression","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
             if payslip.acum_subsidio_aplicado > subsidio_empleo:
                desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
             else:
                result = 0
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if desc_isr_ret_subem_entregado > 0:
     result = 1
   else:
     result = 0
else:
   result = 0",,"O005","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
          else:
             result = 0
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(desc_isr_ret_subem_entregado, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR a retener por subsidio entregado que no correspondia","catalogo.otropago07",,,"False","False","0.0",,"415","Todo el monto",,"Python Code",
"payroll_itadmin_rule.devolucion_subem","payroll_itadmin_category.ALW3","ALW3","Python Expression","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if desc_dev_subem > 0:
     result = 1
   else:
     result = 0
else:
   result = 0",,"O006","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(desc_dev_subem,2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","DevoluciÃ³n de SUBEM efectivamente entregado","catalogo.otropago09",,,"False","False","0.0",,"420","Todo el monto",,"Python Code",
"payroll_itadmin_rule.total_otros_pagos","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"TOP","result = categories.ALW3",,"False",,"0.0",,,"False","False","contract.wage","0.0","Total otros pagos",,,,"False","False","0.0",,"499","Todo el monto",,"Python Code",
"payroll_itadmin_rule.subsidio_empleo_aplicado","payroll_itadmin_category.AUX","AUX","Python Expression","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

work = 0
if TPER > 0:
      work = 1

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

if subsidio_empleo <= 0:
    result = 0
else:
   if work:
      result =  1
   else:
      result = 0

if inputs.SUB:
   result = 1",,"SUB","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > 0:
      subsidio_pagado = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem) - subsidio_empleo
      total =  isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      subsidio_pagado = isr_tarifa_113 - abs(payslip.acum_isr) - subsidio_empleo
      total = isr_tarifa_113 - abs(payslip.acum_isr)
   total2 = subsidio_pagado - payslip.acum_subsidio_aplicado
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

smm = 0
if payslip.ultima_nomina and payslip.isr_ajustar:
   line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
   smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
else:
   smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

if round(grabado_mensual,2) <= round(smm,2):
   result = 0
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
      if payslip.acum_subsidio_aplicado > subsidio_empleo:
         result = 0
      else:
         result = round(subsidio_empleo - payslip.acum_subsidio_aplicado,2)
   else:
      result = round((subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar,2)

if inputs.SUB:
   result = inputs.SUB.amount",,"False","Efectivo","10.0",,,"False","False","contract.wage","0.0","Subsidio al Empleo aplicado",,,,"False","False","0.0",,"500","Todo el monto",,"Python Code",
"payroll_itadmin_rule.isr_antes_subem","payroll_itadmin_category.AUX","AUX","Python Expression","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

work = 0
if TPER > 0:
      work = 1

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
total = isr_tarifa_113 
total2 = subsidio_pagado

if subsidio_empleo <= 0:
   result = 0
else:
   if work:
      result =  1
   else:
      result = 0

if inputs.ISR:
   result = 1",,"ISR","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   subsidio_pagado = isr_tarifa_113 - subsidio_empleo
   if subsidio_empleo > 0:
      total = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      total = isr_tarifa_113 - abs(payslip.acum_isr)
   total2 =  subsidio_pagado
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
     if payslip.acum_subsidio_aplicado > subsidio_empleo:
         total = 0
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if total < 0:
   result = 0
else:
   smm = 0
   if payslip.ultima_nomina and payslip.isr_ajustar:
      line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
      smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
   else:
      smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

   if round(grabado_mensual,2) <= round(smm,2):
      result = 0
   else:
      result = round(total,2)

if inputs.ISR:
   result = inputs.ISR.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR antes de SUBEM",,,,"False","False","0.0",,"502","Todo el monto",,"Python Code",
"payroll_itadmin_rule.isr_reparticion_utilidades","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0

ingreso_normal_mensual = contract.sueldo_diario*15
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',ingreso_normal_mensual)],order='lim_inf desc',limit=1)
    if line:
       inm_lim_inf = line.lim_inf
       inm_c_fija= line.c_fija
       inm_p_s_exedente = line.s_excedente

aguinaldo_normal_mensual = contract.sueldo_diario*30 + categories.ALW
if contract.tablas_cfdi_id:
    line2 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',aguinaldo_normal_mensual)],order='lim_inf desc',limit=1)
    if line2:
       anm_lim_inf = line2.lim_inf
       anm_c_fija= line2.c_fija
       anm_p_s_exedente = line2.s_excedente
	   
#articulo 113
excedente_limite_superior = ingreso_normal_mensual - inm_lim_inf
impuesto_marginal = excedente_limite_superior * inm_p_s_exedente/100
isr_tarifa_113 = impuesto_marginal + inm_c_fija

#articulo 113
ex_limite_superior = aguinaldo_normal_mensual - anm_lim_inf
imp_marginal = ex_limite_superior * anm_p_s_exedente/100
isr_tarifa_213 = imp_marginal + anm_c_fija

result = round(isr_tarifa_213-isr_tarifa_113, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR reparticiÃ³n utilidades",,,,"False","False","0.0",,"503","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_asimilados","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0

ingreso_normal_mensual =  contract.sueldo_diario*payslip.imss_mes + categories.ALW/worked_days.WORK100.number_of_days * payslip.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',ingreso_normal_mensual)],order='lim_inf desc',limit=1)
    if line:
       inm_lim_inf = line.lim_inf
       inm_c_fija= line.c_fija
       inm_p_s_exedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = ingreso_normal_mensual - inm_lim_inf
impuesto_marginal = excedente_limite_superior * inm_p_s_exedente/100
isr_tarifa_113 = impuesto_marginal + inm_c_fija

result = round((isr_tarifa_113 / payslip.imss_mes) * worked_days.WORK100.number_of_days, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR asimilados",,,,"False","False","0.0",,"504","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_art96","payroll_itadmin_category.DED","DED","Python Expression","if payslip.nom_liquidacion:
   result = 1
else:
   result = 0",,"ISR3","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
monto_percepciones = TPERG

if rules.P021:
   monto_percepciones = monto_percepciones - P021
if rules.P033:
   monto_percepciones = monto_percepciones - P033

grabado_mensual = monto_percepciones + contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

grabado_mensual2 = contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line3 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line3:
       limite_inferior2 = line3.lim_inf
       cuota_fija2 = line3.c_fija
       porcentaje_sobre_excedente2 = line3.s_excedente
    line4 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line4:
       subsidio_empleo2 = line4.s_mensual
	   
#articulo 113
excedente_limite_superior2 = grabado_mensual2 - limite_inferior2
impuesto_marginal2 = excedente_limite_superior2 * porcentaje_sobre_excedente2/100
isr_tarifa_113_2 = impuesto_marginal2 + cuota_fija2


isr_mensual = isr_tarifa_113 - isr_tarifa_113_2

if contract.periodicidad_pago == '02':
   isr_mensual = isr_mensual / 4
if contract.periodicidad_pago == '04':
   isr_mensual = isr_mensual / 2

result = round(isr_mensual, 2)","ISR para nomina de liquidaciÃ³n","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR Art. 96 LISR",,,,"False","False","0.0",,"504","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_aguinaldo","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR2","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
monto_percepciones = 0

monto_percepciones =  TPERG

fraccion1 = monto_percepciones / 365 * contract.tablas_cfdi_id.imss_mes

grabado_mensual = fraccion1 + contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
fraccion2 = impuesto_marginal + cuota_fija

grabado_mensual2 = contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line3 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line3:
       limite_inferior2 = line3.lim_inf
       cuota_fija2 = line3.c_fija
       porcentaje_sobre_excedente2 = line3.s_excedente
    line4 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line4:
       subsidio_empleo2 = line4.s_mensual
	   
#articulo 113
excedente_limite_superior2 = grabado_mensual2 - limite_inferior2
impuesto_marginal2 = excedente_limite_superior2 * porcentaje_sobre_excedente2/100
isr_tarifa_113_2 = impuesto_marginal2 + cuota_fija2

fraccion3 = fraccion2 - isr_tarifa_113_2

if fraccion1 > 0:
   fraccion5 = fraccion3 / fraccion1
   result = round(fraccion5 * monto_percepciones, 2)
else:
   result = 0","ISR para nomina de aguinaldos","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR aguinaldo",,,,"False","False","0.0",,"504","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_art85","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR2","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0

grabado_mensual = contract.sueldo_diario * 30

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

tasa_isr = isr_tarifa_113 / grabado_mensual

result = round(TPERG * tasa_isr, 2)","ISR para nomina de liquidaciÃ³n","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR Art. 95 LISR",,,,"False","False","0.0",,"504","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_sp","payroll_itadmin_category.DED","DED","Python Expression","result = 1
   ",,"ISR2","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
isr_retener = 0

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          isr_retener = isr_retener - op_isr_ajuste
       else:
          isr_retener = isr_retener - payslip.acum_isr_antes_subem + payslip.acum_subsidio_aplicado
   else:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             isr_retener = isr_retener - (payslip.acum_subsidio_aplicado - subsidio_empleo)
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if inputs.ISR2:
   result =  inputs.ISR2.amount
else:
   smm = 0
   if payslip.ultima_nomina and payslip.isr_ajustar:
      line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
      smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
   else:
      smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

   if round(grabado_mensual,2) <= round(smm,2):
      result = 0
   else:
      if payslip.ultima_nomina and payslip.isr_ajustar:
           if isr_retener < 0:
               result =  0
           else:
               result = round(isr_retener,2)
      else:
           if subsidio_pagado < 0:
               result =  0
           else:
               if total2 < 0:
                  result = abs(round(total,2))
               else:
                  result = abs(round(total2,2))","ISR para nomina ordinaria","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR (sp)",,,,"False","False","0.0",,"505","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.subsidio_aplicado","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR3","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0

grabado_mensual = contract.sueldo_diario*30.4 + categories.ALW/7 *30.4

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
#subsidio_pagado = isr_tarifa_113 - subsidio_empleo
total = (isr_tarifa_113 / payslip.imss_mes) * payslip.imss_dias

result = round(total, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Subsidio aplicado",,,,"False","False","0.0",,"505","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_ptu","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR2","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
monto_percepciones = TPERG/365*contract.tablas_cfdi_id.imss_mes

grabado_mensual = monto_percepciones + contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

grabado_mensual2 = contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line3 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line3:
       limite_inferior2 = line3.lim_inf
       cuota_fija2 = line3.c_fija
       porcentaje_sobre_excedente2 = line3.s_excedente
    line4 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line4:
       subsidio_empleo2 = line4.s_mensual
	   
#articulo 113
excedente_limite_superior2 = grabado_mensual2 - limite_inferior2
impuesto_marginal2 = excedente_limite_superior2 * porcentaje_sobre_excedente2/100
isr_tarifa_113_2 = impuesto_marginal2 + cuota_fija2


isr_mensual = isr_tarifa_113 - isr_tarifa_113_2

if TPERG > 0 :
   result = round(TPERG * isr_mensual / monto_percepciones, 2)
else:
   result = 0","ISR para nomina ordinaria","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR (sp) PTU",,,,"False","False","0.0",,"505","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_art174","payroll_itadmin_category.DED","DED","Python Expression","if payslip.nom_liquidacion:
   result = 1
else:
   result = 0",,"ISR4","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
monto_percepciones = 0

if rules.PG010:
   monto_percepciones = monto_percepciones + PG010
if rules.PG004:
   monto_percepciones = monto_percepciones + PG004

fraccion1 = monto_percepciones / 365 * contract.tablas_cfdi_id.imss_mes

grabado_mensual = fraccion1 + contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
fraccion2 = impuesto_marginal + cuota_fija

grabado_mensual2 = contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line3 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual2)],order='lim_inf desc',limit=1)
    if line3:
       limite_inferior2 = line3.lim_inf
       cuota_fija2 = line3.c_fija
       porcentaje_sobre_excedente2 = line3.s_excedente
    line4 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual2)],order='lim_inf desc',limit=1)
    if line4:
       subsidio_empleo2 = line4.s_mensual
	   
#articulo 113
excedente_limite_superior2 = grabado_mensual2 - limite_inferior2
impuesto_marginal2 = excedente_limite_superior2 * porcentaje_sobre_excedente2/100
isr_tarifa_113_2 = impuesto_marginal2 + cuota_fija2

fraccion3 = fraccion2 - isr_tarifa_113_2

if fraccion1 > 0:
   fraccion5 = fraccion3 / fraccion1
   result = round(fraccion5 * monto_percepciones, 2)
else:
   result = 0","ISR para nomina de liquidaciÃ³n","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR Art. 174 RLISR",,,,"False","False","0.0",,"505","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_mensual","payroll_itadmin_category.DED","DED","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"ISR2","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
dias_periodo_mes = 0
dias_periodo = 0

if contract.periodicidad_pago == '02' and payslip.isr_ajustar:
   dias_periodo_mes = payslip.dias_periodo
   dias_periodo = 7 * float(payslip.no_nomina)
else:
   dias_periodo_mes = contract.tablas_cfdi_id.imss_mes
   dias_periodo = payslip.dias_pagar

#grabado_mensual
grabado_mensual = TPERG 

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

total = round(isr_tarifa_113, 2)

result = abs(total)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR mensual",,,,"False","False","0.0",,"505","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.isr_ajuste","payroll_itadmin_category.DED","DED","Python Expression","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
             if payslip.acum_subsidio_aplicado > subsidio_empleo:
                desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
             else:
                result = 0
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if op_isr_ajuste > 0:
     result = 1
   else:
     result = 0
else:
   result = 0",,"D060","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
          else:
             result = 0
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(op_isr_ajuste, 2)","ISR para nomina ordinaria","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR (sp) ajuste",,,,"False","False","0.0",,"506","Todo el monto","catalogos.deduccion02","Python Code",
"payroll_itadmin_rule.ajuste_subsidio_empleo","payroll_itadmin_category.DED","DED","Python Expression","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          op_ajuste_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if op_ajuste_subem > 0 or subem_entregar > 0: 
     result = 1
   else:
     result = 0
else:
   result = 0",,"D061","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_ajuste_subem = 0
subem_entregar =  0
factor01 = 0

if isr_tarifa_113 > subsidio_empleo:
   if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
      op_ajuste_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

if op_ajuste_subem > 0:
   result = round(op_ajuste_subem, 2)
else:
   result = round(subem_entregar, 2)","ISR para nomina ordinaria","False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste en Subsidio para el empleo (efectivamente entregado al trabajador)",,,,"False","False","0.0",,"507","Todo el monto","catalogos.deduccion71","Python Code",
"payroll_itadmin_rule.ajuste_subsidio_causado","payroll_itadmin_category.DED","DED","Python Expression","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
             if payslip.acum_subsidio_aplicado > subsidio_empleo:
                desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
             else:
                result = 0
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if op_ajuste_subem_causado > 0:
     result = 1
   else:
     result = 0
else:
   result = 0",,"D062","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
          else:
             result = 0
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(op_ajuste_subem_causado, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste subsidio causado",,,,"False","False","0.0",,"508","Todo el monto","catalogos.deduccion107","Python Code",
"payroll_itadmin_rule.imss","payroll_itadmin_category.DED","DED","Python Expression","if contract.sueldo_diario <= contract.tablas_cfdi_id.salario_minimo:
   result = 0
else:
   result = 1",,"D002","dias_laborados = 0
dias_completos = 0
dias_trabajo = 0

dias_completos = payslip.imss_dias
dias_laborados =  dias_completos

if worked_days.WORK100:
   dias_trabajo = dias_trabajo + worked_days.WORK100.number_of_days
if worked_days.SEPT:
   dias_trabajo = dias_trabajo + worked_days.SEPT.number_of_days
if worked_days.FJC:
   dias_trabajo = dias_trabajo + worked_days.FJC.number_of_days

if dias_trabajo > 0.01:
   if worked_days.FI:
      dias_laborados = dias_laborados - worked_days.FI.number_of_days
   if worked_days.FJS:
      dias_laborados = dias_laborados - worked_days.FJS.number_of_days
   if worked_days.FR:
      dias_laborados = dias_laborados - worked_days.FR.number_of_days
   if worked_days.INC_MAT:
      dias_laborados = dias_laborados - worked_days.INC_MAT.number_of_days
      dias_completos = dias_completos - worked_days.INC_MAT.number_of_days
   if worked_days.INC_EG:
      dias_laborados = dias_laborados - worked_days.INC_EG.number_of_days
      dias_completos = dias_completos - worked_days.INC_EG.number_of_days
   if worked_days.INC_RT:
      dias_laborados = dias_laborados - worked_days.INC_RT.number_of_days
      dias_completos = dias_completos - worked_days.INC_RT.number_of_days
else:
   dias_laborados = 0
   dias_completos = 0

dias_periodo = 0
line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to),('dia_inicio','<=',payslip.date_to)],limit=1)
if line:
   dias_periodo = line.no_dias/8

#cuota del IMSS parte del Empleado
if contract.sueldo_base_cotizacion < 25 * contract.tablas_cfdi_id.uma:
   salario_cotizado = contract.sueldo_base_cotizacion
else:
   salario_cotizado = 25 * contract.tablas_cfdi_id.uma

uma3 =  contract.tablas_cfdi_id.uma * 3

prestaciones = salario_cotizado * contract.tablas_cfdi_id.enf_mat_prestaciones_e/100 * dias_completos
invalli_y_vida = salario_cotizado * contract.tablas_cfdi_id.inv_vida_e/100 * dias_laborados
cesantia_y_vejez = salario_cotizado * contract.tablas_cfdi_id.cesantia_vejez_e/100 * dias_laborados
pensio_y_benefi = salario_cotizado * contract.tablas_cfdi_id.enf_mat_gastos_med_e/100 *dias_completos

#seguro_enfermedad_maternidad
excedente = salario_cotizado - uma3
base_cotizacion = excedente * contract.tablas_cfdi_id.enf_mat_excedente_e/100
seg_enf_mat = base_cotizacion * dias_completos

if contract.sueldo_base_cotizacion < uma3:
  prestaciones = prestaciones + pensio_y_benefi
else:
  prestaciones = prestaciones + pensio_y_benefi + abs(seg_enf_mat)

if inputs.IMSS:
   result = inputs.IMSS.amount
else:
   result = round(invalli_y_vida + prestaciones + cesantia_y_vejez, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","IMSS",,,,"False","False","0.0",,"510","Todo el monto","catalogos.deduccion01","Python Code",
"payroll_itadmin_rule.cuota_caja_ahoro","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D003:
   result =  1
else:
   result = 0",,"D003","if inputs.D003:
   result = inputs.D003.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Cuota caja de ahorro",,,,"False","False","0.0",,"515","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.descuento_prestamo_caja","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D004:
   result =  1
else:
   result = 0",,"D004","if inputs.D004:
   result = inputs.D004.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento prÃ©stamo caja",,,,"False","False","0.0",,"520","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.interes_prestamo_caja","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D005:
   result =  1
else:
   result = 0",,"D005","if inputs.D005:
   result = inputs.D005.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","InterÃ©s prÃ©stamo caja",,,,"False","False","0.0",,"525","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.descuento_prestamo_personal","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D007:
   result =  1
else:
   result = 0",,"D007","if inputs.D007:
   result = inputs.D007.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento prÃ©stamo personal",,,,"False","False","0.0",,"530","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.pago_reposicion_cred","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D008:
   result =  1
else:
   result = 0",,"D008","if inputs.D008:
   result = inputs.D008.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Pago reposiciÃ³n credencial",,,,"False","False","0.0",,"535","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.pension_alimenticia","payroll_itadmin_category.DED","DED","Python Expression","if contract.pens_alim > 0:
   result =1>0
else:
   result = 0>1",,"D010","if rules.P030:
   result =  round((P001 + P030 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)
else:
   result =  round((P001 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","PensiÃ³n alimenticia",,,,"False","False","0.0",,"540","Todo el monto","catalogos.deduccion07","Python Code",
"payroll_itadmin_rule.descuento_faltante_material","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D011:
   result =  1>0
else:
   result = 0>1",,"D011","if inputs.D011:
   result = inputs.D011.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento faltante material",,,,"False","False","0.0",,"545","Todo el monto",,"Python Code",
"payroll_itadmin_rule.deudores_diversos","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D014:
   result =  1
else:
   result = 0",,"D014","if inputs.D014:
   result = inputs.D014.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Deudores diversos",,,,"False","False","0.0",,"550","Todo el monto",,"Python Code",
"payroll_itadmin_rule.ajuste_fonacot","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D019:
   result =  1
else:
   result = 0",,"D019","if inputs.D019:
   result = inputs.D019.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste FONACOT",,,,"False","False","0.0",,"555","Todo el monto",,"Python Code",
"payroll_itadmin_rule.descuento_faltante_efectivo","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D021:
   if inputs.D021.amount > 0:
      result = 1
   else:
      result = 0",,"D021","if inputs.D021:
   result = inputs.D021.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento faltante efectivo",,,,"False","False","0.0",,"560","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.descuento_otros","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D032:
   if inputs.D032.amount > 0:
      result = 1
   else:
      result = 0",,"D032","if inputs.D032:
   result = inputs.D032.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento otros",,,,"False","False","0.0",,"565","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.viaticos_03","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D040:
   if inputs.D040.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"D040","if inputs.D040:
   result = inputs.D040.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Viaticos",,,,"False","False","0.0",,"570","Todo el monto",,"Python Code",
"payroll_itadmin_rule.amortizacion_infonavit","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D092:
   if inputs.D092.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1",,"D092","if inputs.D092:
   result = inputs.D092.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","AmortizaciÃ³n INFONAVIT",,,,"False","False","0.0",,"575","Todo el monto",,"Python Code",
"payroll_itadmin_rule.credito_fonacot","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D093 or contract.prestamo_fonacot > 0:
   result =  1
else:
   result = 0",,"D093","total = 0
if inputs.D093:
   total = inputs.D093.amount
if contract.prestamo_fonacot > 0:
   total = contract.prestamo_fonacot

result = round(total, 2)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","CrÃ©dito FONACOT",,,,"False","False","0.0",,"580","Todo el monto","catalogos.deduccion11","Python Code",
"payroll_itadmin_rule.credito_infonavit_fija","payroll_itadmin_category.DED","DED","Python Expression","if contract.infonavit_fijo > 0 or inputs.INFONAVIT:
   if TPER == 0:
      result = 0
   else:
      result = 1
else:
   result = 0",,"D094","dias_periodo = 0
line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to),('dia_inicio','<=',payslip.date_to)],limit=1)

if line:
   dias_periodo = line.no_dias

dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days
if worked_days.SEPT:
   dias_laborados = dias_laborados + worked_days.SEPT.number_of_days

if inputs.INFONAVIT:
   result =  inputs.INFONAVIT.amount
else:
   result = round(((contract.infonavit_fijo + 15) / 2) / 30.4 * dias_laborados, 2)


#   result = int(round((contract.infonavit_fijo * 2 + 15) / dias_periodo * payslip.dias_pagar))
#Cuota fija monetaria (pesos)
#((Cuota fija x 2) Ã· DÃ­as del bimestre) x DÃ­as del bimestre cotizados) + Seguro de daÃ±os a la vivienda = DeducciÃ³n",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","CrÃ©dito Infonavit (cuota fija)",,,,"False","False","0.0",,"585","Todo el monto","catalogos.deduccion10","Python Code",
"payroll_itadmin_rule.credito_infonavit_sbc","payroll_itadmin_category.DED","DED","Python Expression","if contract.infonavit_porc > 0:
   if TPER == 0:
      result = 0
   else:
      result = 1
else:
   result = 0",,"D094","dias_ausentismo = 0
if worked_days.FJS:
   dias_ausentismo= dias_ausentismo + worked_days.FJS.number_of_days
if worked_days.FR:
   dias_ausentismo= dias_ausentismo + worked_days.FR.number_of_days
#if worked_days.FI:
#   dias_ausentismo= dias_ausentismo + worked_days.FI.number_of_days

dias_incapacidad = 0
if worked_days.INC_MAT:
   dias_incapacidad = dias_incapacidad + worked_days.INC_MAT.number_of_days
if worked_days.INC_EG:
   dias_incapacidad = dias_incapacidad + worked_days.INC_EG.number_of_days
#if worked_days.INC_RT:
 #  dias_incapacidad = dias_incapacidad + worked_days.INC_RT.number_of_days

#result = ((contract.sueldo_base_cotizacion * contract.infonavit_porc/100 * dias_periodo) + 15 ) / dias_periodo * dias_laborados

#result = ((contract.sueldo_base_cotizacion * contract.infonavit_porc/100  + 15 ) / 2 ) / 30.4 * dias_laborados

result = round(((contract.sueldo_base_cotizacion * (payslip.imss_dias - dias_ausentismo - dias_incapacidad)) * (contract.infonavit_porc / 100)) + 15 , 2)

if P001 <= 0:
   result = 0

#Salario Base de CotizaciÃ³n
#(SBC x Porcentaje a descontar x DÃ­as cotizados en el bimestre) + Seguro de daÃ±os a la vivienda",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","CrÃ©dito Infonavit (SBC)",,,,"False","False","0.0",,"585","Todo el monto","catalogos.deduccion10","Python Code",
"payroll_itadmin_rule.credito_infonavit_vsm","payroll_itadmin_category.DED","DED","Python Expression","if contract.infonavit_vsm > 0:
   if TPER == 0:
      result = 0
   else:
      result = 1
else:
   result = 0 ",,"D094","dias_periodo = 0
dias_mes = 0
line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to),('dia_inicio','<=',payslip.date_to)],limit=1)
if line:
   dias_periodo = line.no_dias

mes_actual = contract.env['tablas.periodo.mensual'].search([('mes', '=', payslip.mes)],limit=1)
if mes_actual:
   dias_mes = mes_actual.no_dias

dias_laborados = 0
if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days
if worked_days.SEPT:
   dias_laborados = dias_laborados + worked_days.SEPT.number_of_days

result = round(((contract.infonavit_vsm * contract.tablas_cfdi_id.umi + 15) / 2 ) / 30.4 * dias_laborados, 2)

#Cuota fija en veces la Unidad de Medida y ActualizaciÃ³n (UMA)
#(((VSM x UMA x 2) Ã· DÃ­as del bimestre) x DÃ­as del bimestre cotizados) + Seguro de daÃ±os a la vivienda",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","CrÃ©dito Infonavit (VSM)",,,,"False","False","0.0",,"585","Todo el monto","catalogos.deduccion10","Python Code",
"payroll_itadmin_rule.seguro_infonavit","payroll_itadmin_category.DED","DED","Python Expression","dias_periodo = 0
dias_mes = 0

if contract.infonavit_fijo > 0 or contract.infonavit_vsm > 0 or contract.infonavit_porc > 0:
   line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to), ('dia_inicio','<=',payslip.date_to)],limit=1)
   if line.dia_inicio >= payslip.date_from  and line.dia_inicio <= payslip.date_to:
      result = 1
   else:
      result = 0
else:
   result = 0",,"D091","result = 15",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Seguro de vivienda infonavit",,,,"False","False","0.0",,"586","Todo el monto","catalogos.deduccion10","Python Code",
"payroll_itadmin_rule.ajuste_infonavit","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D095:
   result = 1
else:
   result = 0",,"D095","result = inputs.D096.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste INFONAVIT bim. anterior",,,,"False","False","0.0",,"590","Todo el monto","catalogos.deduccion05","Python Code",
"payroll_itadmin_rule.adeudo_infonavit","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D096:
   result = 1
else:
   result = 0",,"D096","result = inputs.D096.amount",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Adeudo INFONAVIT",,,,"False","False","0.0",,"595","Todo el monto","catalogos.deduccion05","Python Code",
"payroll_itadmin_rule.isr_retenido_ejercicio_ant","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D204:
   result = inputs.D204.amount
else:
   result =0",,"D204","if inputs.D204:
   result = inputs.D204.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","ISR retenido de ejercicio anterior","catalogo.otropago05",,,"False","False","0.0",,"618","Todo el monto","catalogos.deduccion101","Python Code",
"payroll_itadmin_rule.descuento_periodico_01","payroll_itadmin_category.DED","DED","Python Expression","result = (payslip.descuento1_amount or 0)",,"D052","result = (payslip.descuento1_amount or 0)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento periodico 1",,,,"False","False","0.0",,"630","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.interes_descuento_periodico_01","payroll_itadmin_category.DED","DED","Python Expression","result = (payslip.descuento1_int or 0)",,"D053","result = (payslip.descuento1_int or 0)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","InterÃ©s descuento periodico 1",,,,"False","False","0.0",,"635","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.descuento_periodico_02","payroll_itadmin_category.DED","DED","Python Expression","result = (payslip.descuento2_amount or 0)",,"D054","result = (payslip.descuento2_amount or 0)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Descuento periodico 2",,,,"False","False","0.0",,"640","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.interes_descuento_periodico_02","payroll_itadmin_category.DED","DED","Python Expression","result = (payslip.descuento2_int or 0)",,"D055","result = (payslip.descuento2_int or 0)",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","InterÃ©s descuento periodico 2",,,,"False","False","0.0",,"645","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.vale_comida","payroll_itadmin_category.DED","DED","Python Expression","if contract.vale_despensa:
   result = 1
else:
   result = 0",,"D056","result = round((contract.tablas_cfdi_id.uma * 0.20 * 365 /12 ) / 2)",,"False","Efectivo","1.0",,,"False","False","contract.wage","0.0","Descuento vale de comida",,,,"False","False","0.0",,"650","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.fallecimiento","payroll_itadmin_category.DED","DED","Python Expression","if inputs.D057:
   result =  1
else:
   result = 0",,"D057","if inputs.D057:
   result = inputs.D057.amount
else:
   result =0",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Fallecimiento",,,,"False","False","0.0",,"655","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.total_deduciones","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"TDED","result = categories.DED",,"False",,"0.0",,,"False","False","contract.wage","0.0","Total deducciones",,,,"False","False","0.0",,"699","Todo el monto",,"Python Code",
"payroll_itadmin_rule.ajuste_neto_01","payroll_itadmin_category.DED","DED","Python Expression","total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = 1
if decimales > 0.10 and decimales < 0.20:
   total = 0
if decimales > 0.20 and decimales < 0.30:
   total = 1
if decimales > 0.30 and decimales < 0.40:
   total =0
if decimales > 0.40 and decimales < 0.50:
   total = 1
if decimales > 0.50 and decimales < 0.60:
   total = 0
if decimales > 0.60 and decimales < 0.70:
   total = 1
if decimales > 0.70 and decimales < 0.80:
   total = 0
if decimales > 0.80 and decimales < 0.90:
   total = 1
if decimales > 0.90:
   total = 0

result = total",,"D099","total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = decimales - 0.0
if decimales > 0.10 and decimales < 0.20:
   total = decimales - 0.20
if decimales > 0.20 and decimales < 0.30:
   total = decimales - 0.20
if decimales > 0.30 and decimales < 0.40:
   total = decimales - 0.40
if decimales > 0.40 and decimales < 0.50:
   total = decimales - 0.40
if decimales > 0.50 and decimales < 0.60:
   total = decimales - 0.60
if decimales > 0.60 and decimales < 0.70:
   total = decimales - 0.60
if decimales > 0.70 and decimales < 0.80:
   total = decimales - 0.80
if decimales > 0.80 and decimales < 0.90:
   total = decimales - 0.80
if decimales > 0.90:
   total = decimales - 1.0

result = total",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste al neto",,,,"False","False","0.0",,"890","Todo el monto","catalogos.deduccion04","Python Code",
"payroll_itadmin_rule.ajuste_neto_02","payroll_itadmin_category.ALW","ALW","Python Expression","total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = 0
if decimales > 0.10 and decimales < 0.20:
   total = 1
if decimales > 0.20 and decimales < 0.30:
   total = 0
if decimales > 0.30 and decimales < 0.40:
   total =1
if decimales > 0.40 and decimales < 0.50:
   total = 0
if decimales > 0.50 and decimales < 0.60:
   total = 1
if decimales > 0.60 and decimales < 0.70:
   total = 0
if decimales > 0.70 and decimales < 0.80:
   total = 1
if decimales > 0.80 and decimales < 0.90:
   total = 0
if decimales > 0.90:
   total = 1

result = total",,"P044","total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = 0.0 - decimales
if decimales > 0.10 and decimales < 0.20:
   total = 0.20 - decimales
if decimales > 0.20 and decimales < 0.30:
   total = 0.20 - decimales
if decimales > 0.30 and decimales < 0.40:
   total = 0.40 - decimales
if decimales > 0.40 and decimales < 0.50:
   total = 0.40 - decimales
if decimales > 0.50 and decimales < 0.60:
   total = 0.60 - decimales
if decimales > 0.60 and decimales < 0.70:
   total = 0.60 - decimales
if decimales > 0.70 and decimales < 0.80:
   total = 0.80 - decimales
if decimales > 0.80 and decimales < 0.90:
   total = 0.80 - decimales
if decimales > 0.90:
   total = 1.0 - decimales

result = total",,"False","Efectivo","0.0",,,"False","False","contract.wage","0.0","Ajuste al neto",,,,"False","False","0.0",,"891","Todo el monto",,"Python Code","catalogo.percepciones33"
"payroll_itadmin_rule.sueldo_neto_efectivo","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"EFECT","total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total",,"False",,"0.0",,,"False","False","contract.wage","0.0","Sueldo neto en efectivo",,,,"False","False","0.0",,"899","Todo el monto",,"Python Code",
"payroll_itadmin_rule.sueldo_neto","payroll_itadmin_category.AUX","AUX","Always True","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,"NET","result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED",,"False",,"0.0",,,"False","False","contract.wage","0.0","Sueldo neto",,,,"False","False","0.0",,"900","Todo el monto",,"Python Code",
